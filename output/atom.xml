<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://doc.xr1228.com/</id>
    <title>Wuriqilang</title>
    <updated>2020-01-27T15:39:01.967Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://doc.xr1228.com/"/>
    <link rel="self" href="http://doc.xr1228.com/atom.xml"/>
    <subtitle>&lt;p&gt;一名专注于智能制造的程序员&lt;/p&gt;</subtitle>
    <logo>http://doc.xr1228.com/images/avatar.png</logo>
    <icon>http://doc.xr1228.com/favicon.ico</icon>
    <rights>All rights reserved 2020, Wuriqilang</rights>
    <entry>
        <title type="html"><![CDATA[云计算的商业模式]]></title>
        <id>http://doc.xr1228.com/post/yun-ji-suan-de-shang-ye-mo-shi</id>
        <link href="http://doc.xr1228.com/post/yun-ji-suan-de-shang-ye-mo-shi">
        </link>
        <updated>2020-01-27T15:10:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="云计算-cloud-computing">云计算 Cloud Computing</h3>
<p>既指作为服务通过互联网提供的应用程序（SaaS模式），又指提供这些服务的，位于数据中心的硬件和系统软件（公用计算）</p>
<ul>
<li>云：数据中心硬件与软件</li>
<li>公有云：用即用即付的模式，开放给大众实用的云</li>
<li>私有云：一个企业或者组织内部的数据中心</li>
<li>公用（utility）计算：给人以无限资源的错觉</li>
</ul>
<p>（以上定义来自加州大学伯克利分校，RAD实验室，2009年2月）</p>
<h3 id="云计算商业模式的三大特点">云计算商业模式的三大特点：</h3>
<ul>
<li>按需服务</li>
<li>资源池</li>
<li>可测量的服务</li>
</ul>
<h3 id="云计算发展的市场条件">云计算发展的市场条件</h3>
<ul>
<li>大规模的互联网应用（社交网络、多媒体）
<ul>
<li>规模经济</li>
<li>需求增长促进数据中心建设增长</li>
<li>无法预测的应用增长速度Zynga，Netflix</li>
</ul>
</li>
<li>大数据应用
<ul>
<li>日志分析</li>
<li>机器学习应用</li>
</ul>
</li>
</ul>
<h3 id="云计算的价值-提高数据资源利用率">云计算的价值 ：提高数据资源利用率</h3>
<p><img src="http://doc.xr1228.com//post-images/1580138871978.png" alt="" loading="lazy"><br>
<img src="http://doc.xr1228.com//post-images/1580138914955.png" alt="" loading="lazy"></p>
<h3 id="云计算的分类">云计算的分类</h3>
<p>根据提供抽象接口位于哪一层来分类</p>
<ul>
<li>
<p>指令集虚拟机（Amazon EC2，3Tera）</p>
</li>
<li>
<p>运行时系统虚拟机（Microsoft Azure）</p>
</li>
<li>
<p>框架型虚拟机（Google AppEngine，Force.com)</p>
</li>
<li>
<p>折衷：灵活性/可移植性 VS “内置”功能</p>
<figure data-type="image" tabindex="1"><img src="http://doc.xr1228.com//post-images/1580139074150.png" alt="" loading="lazy"></figure>
</li>
</ul>
<p>根据提供服务类型分类</p>
<ul>
<li>SaaS 软件即服务 ——消费者使用提供商运行在云设施上的应用程序，基本无法控制程序或者基础架构。</li>
<li>PasS 平台即服务 ——消费者将自己编写的程序部署在云基础设施上，可以控制应用程序，但不能控制基础设施</li>
<li>IaaS 基础设施即服务 —— 提供处理、存储、网络和其他基础计算资源，消费者可以利用这些资源部署任意程序，包括操作系统或应用程序。</li>
</ul>
<p>Gartner新技术炒作曲线</p>
<figure data-type="image" tabindex="2"><img src="http://doc.xr1228.com//post-images/1580139452341.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[大数据的基础架构 —— 云计算]]></title>
        <id>http://doc.xr1228.com/post/da-shu-ju-de-ji-chu-jia-gou-yun-ji-suan</id>
        <link href="http://doc.xr1228.com/post/da-shu-ju-de-ji-chu-jia-gou-yun-ji-suan">
        </link>
        <updated>2020-01-23T15:59:47.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h2 id="大数据对于系统架构的需求">大数据对于系统架构的需求</h2>
<p>为了对应大数据的几个基本特点：Volume(数据量大) Velocity(产生速度快) Variety(种类多)  Value(价值密度低)。因为以上几个特点，大数据对于数据架构的需求如下：</p>
<ul>
<li>显示的需求
<ul>
<li>海量计算和存储  ➡️  数据量大</li>
<li>快速计算  ➡️  产生速度快</li>
</ul>
</li>
<li>隐式的需求
<ul>
<li>数据的快速传输  ➡️  产生速度快</li>
<li>灵活性  ➡️  种类多</li>
<li>低成本  ➡️  价值密度低</li>
</ul>
</li>
</ul>
<h2 id="大数据的核心设计理念">大数据的核心设计理念</h2>
<ul>
<li>
<p>并行化</p>
<ul>
<li>并行请求</li>
<li>并行进程</li>
<li>并行指令</li>
<li>并行数据</li>
<li>硬件描述</li>
</ul>
</li>
<li>
<p>规模经济  例子：WSC（仓库规模的计算机） 用网络链接起来的计算和存储设备。实用相对同质的硬件和系统软件平台、共享相同的系统管理、运行相对小数目的超大型程序、通用的资源管理架构增强了灵活性。</p>
<ul>
<li>主要部件
<ul>
<li>供电、制冷、建筑、网络、安全</li>
<li>存储、计算</li>
</ul>
</li>
<li>优势
<ul>
<li>规模经济</li>
<li>提高使用率</li>
</ul>
</li>
<li>挑战
<ul>
<li>能耗PUE = Total Energy/Computer Energy</li>
<li>运维</li>
</ul>
</li>
</ul>
</li>
<li>
<p>虚拟化（抽象） 解决多租户、多应用使用的问题</p>
<blockquote>
<p>计算机科学中的所有问题，都可以通过增加一个层次的间接(indirectiron)来解决，当然除了间接层次过多的问题 —— David Wheeler</p>
</blockquote>
</li>
</ul>
<p>虚拟化的结果 —— 每个用户认为自己有一套自己的架构，而实际所有人共享相同的硬件资源。</p>
<figure data-type="image" tabindex="1"><img src="http://doc.xr1228.com//post-images/1579969064114.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python实用手册03 词云]]></title>
        <id>http://doc.xr1228.com/post/python-shi-yong-shou-ce-03-ci-yun</id>
        <link href="http://doc.xr1228.com/post/python-shi-yong-shou-ce-03-ci-yun">
        </link>
        <updated>2020-01-22T13:53:45.000Z</updated>
        <content type="html"><![CDATA[<p>接下来，让我们一起来完成一项具有一定实际价值的工作吧!</p>
<p>在数据可视化领域，我们经常会使用<strong>词云</strong>来对文字中词语频率进行统计。网络当中也有许多类似<a href="http://www.wordle.net/">Wordle</a> 、<a href="http://www.picdata.cn/picdata/">图悦</a>图云生成网站。不过佛家有一句禅语：</p>
<blockquote>
<p>莫向外求，但从心觅</p>
</blockquote>
<p>我们可以片面的将这句话用在编程当中——双手敲过的代码才属于自己。 接下来就让我们通过Python自己编写一个词云生成器吧！</p>
<p>首先是效果图，我节选了BOE(目前国内最大的面板生产企业)现任董事长在2018年全球创新合作伙伴峰会中的演讲，让词云通过分析这篇演讲稿来看看这位企业家为合作伙伴勾勒出的物联网蓝图是怎样的：<br>
<img src="http://doc.xr1228.com//post-images/1579701301281.png" alt="" loading="lazy"></p>
<p>服务、技术、创新这些词语在演讲中被大量提及，通过这样一张图片，就能对这篇演讲的大概内容有一定的了解。那么Python是如何生成这样一副文字大小颜色方向各异的复杂图片呢？<br>
其实十分简单，仍旧是老规矩，NoBB，Show Code！</p>
<pre><code class="language-python"># 词云图
import matplotlib.pyplot as plt
import jieba
from wordcloud import WordCloud
from os import path

localpath = path.dirname(__file__)  # 获取当前工作路径
# 获取文件，注意这里要看编码格式
text = open(localpath+r'/words.txt', 'r', encoding='UTF-8').read()
# 剪切单词
text_cut = jieba.cut(text)
# 单词拼接
result = ' '.join(text_cut)
# 生成次云图
wc = WordCloud(
    # 字体路径
    font_path=localpath + r'/simhei.ttf',
    # 背景颜色
    background_color='white',
    # 图片宽度
    width=500,
    height=350,
    # 字体的大小
    max_font_size=70,
    min_font_size=5,
)
# 生成词云图片
wc.generate(result)
plt.imshow(wc)
plt.axis('off')
plt.show()
</code></pre>
<p>你一定很惊讶短短20多行代码就实现了词云这样复杂的功能。这都归功于Python丰富的各类库<br>
请允许我再次唠叨一下库的定义。</p>
<ul>
<li>所谓库就是Python提供的实现一类功能的具有目录层次结构的程序集合。</li>
</ul>
<p>简而言之，库就是Python提供给我们的，帮我们实现功能的工具包，每个工具包都能实现一个或者一类功能。本次程序我们用到了四个库：</p>
<ul>
<li>matplotlib：Matplotlib是一个Python 2D绘图库，它能够快速辅助数据分析人员生成图表、直方图、功率谱、条形图、误差图、散点图。pyplot是Matplotlib的一个命令风格函数的集合，使matplotlib的机制更像 MATLAB，matplotlib的pyplot子库提供了和matlab类似的绘图API，方便用户快速绘制2D图表。</li>
<li>jieba：jieba是一种中文分词组建，他通过一定计算逻辑可以将一句完整的中文句子拆解成一个个词语。</li>
<li>wordcloud是Python用于构建词云的工具包，其功能强大，支持自定义词云各项参数。</li>
<li>path：这是Python标准库（自带的、无需安装的）中提供的用于文件访问、处理的库</li>
</ul>
<p>通过调用这些库的API，我们就能够很容易的实现词云这样复杂的图片。<br>
你肯定已经早早将程序敲到电脑中编译运行了，但是却出现了这样的错误：</p>
<pre><code class="language-cmd">发生异常: ModuleNotFoundError
No module named 'matplotlib'
</code></pre>
<p>为什么呢？因为我们的程序中使用到了matplotlib、jieba、wordcloud这些外部库，外部库需要我们下载安装到自己电脑上才可以运行。坏消息是我们要下载三个库才能保证程序正常跑起来，好消息安装三个库非常容易！</p>
<p>之前我们提到了包管理器，python内置了包管理器，使用包管理安装外部库的命令格式如下：</p>
<pre><code class="language-cmd">pip3 install SomePackage  
</code></pre>
<p>注意这里是pip3（在python进入3.X时代包管理应当使用pip3这个命令）</p>
<p>接下来让我们开始安装所需的三个外部包。打开命令行程序（windows系统 开始➡️运行➡️cmd，MacOS系统使用终端）</p>
<pre><code class="language-cmd">pip3 install matplotlib  #安装matplotlib

pip3 install jieba  #安装jieba

pip3 install wordcloud  #安装wordcloud
</code></pre>
<p>不出意外的情况下这些包就都安装好了，如果安装过程中有疑问，最好百度/Google/dogedoge一下，善用搜索引擎。<br>
万事俱备只欠东风，接下来我们逐行对程序进行分析。</p>
<pre><code class="language-python">import matplotlib.pyplot as plt
</code></pre>
<ul>
<li>这句话翻译成汉语很简单:引用matplotlib库的pyplot功能包，并将其命名为'plt'</li>
<li>matplotlib.pyplot 也可以写为  from matplotlib import pyplot这样的形式，这种形式我们在后面也会遇到，只需知道他的意思就是从matplotlib库中调用pyplot功能即可</li>
<li>为什么要将其 as plt呢？ 很明显，就是因为 matplotlib.pyplot 太长了，后面我们要多次用到这个命令，索性给他起个名字，方便后续书写。这个名字可以随便命名（尽量符合驼峰命名规则）</li>
</ul>
<pre><code class="language-python">import jieba
from wordcloud import WordCloud
from os import path
</code></pre>
<p>很简单，就是引入其他几个所需的库。（这里三个包都没有使用别名，因为本身长度就不长）</p>
<pre><code class="language-python">localpath = path.dirname(__file__)  # 获取当前工作路径
</code></pre>
<p>python是一种若类型语言，所以我们定义变量“localpath”的时候并没有像其他编程语言一样 使用 string 类型符<br>
这句代码的意思是：定义一个变量“localpath”，给这个变量赋值为 当前工作路径。<br>
如何获取当前工作路径呢？使用的方法就是path.dirname(<strong>file</strong>)，这是Python os库中自带的方法，是不是非常方便？</p>
<pre><code class="language-python"># 获取文件，注意这里要看编码格式
text = open(localpath+r'/words.txt', 'r', encoding='UTF-8').read()
</code></pre>
<p>这句话定义了一个变量 text，将工作目录下的 words.txt中的文字赋值给它。<br>
这里用到了一个 python的open()函数，open() 函数用于打开一个文件，创建一个 file 对象，相关的方法才可以调用它进行读写。<br>
open()函数代码格式如下：</p>
<pre><code class="language-python">open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)
</code></pre>
<ul>
<li>file: 必需，文件路径（相对或者绝对路径）。</li>
<li>mode: 可选，文件打开模式：只读，写入，追加等。我们采用了r模式，即默认文件访问模式。</li>
<li>buffering: 可选，设置缓冲，-1为采用系统默认缓存大小，0表示不使用，1表示使用，大于1的数字表示缓存区大小</li>
<li>encoding: 一般使用utf8（可以正常读取中文）</li>
<li>errors: 报错级别</li>
<li>newline: 区分换行符</li>
<li>closefd: 传入的file参数类型</li>
</ul>
<p>这个时候你可能有些疑惑🤔，道理都懂，但是为什么open()这个函数在这里要这样写？因为该教程的前半部分主要面向初学者，我们也没有经历过系统性的基础学习，这里对 编程语言中方法（函数）的调用进行说明。</p>
<p>比如本例中 open(localpath+r'/words.txt', 'r', encoding='UTF-8') 这个语句</p>
<ul>
<li>open()表示方法名，告知计算机我调用的是什么方法（函数）</li>
<li>open中所有内容，我们称之为参数，不同参数用&quot;,&quot;分开。也就是说在本例中，我们调用open()方法，这个方法使用了三个参数</li>
<li>第一个参数告知计算机文件的路径，localpath+r'/words.txt'  即工作目录下的words.txt文件</li>
<li>第二个参数告知计算机我们采用 r 的模式读取文件（只读）</li>
<li>第三个参数告诉计算机我们用的编码模式</li>
<li>给方法定义参数的这个动作我们称之为 <strong>传参</strong></li>
</ul>
<p>希望这样的解释能让你对编程工作中最基础最重要的 方法和参数有基本的理解。</p>
<pre><code class="language-python"># 剪切单词
text_cut = jieba.cut(text)
</code></pre>
<p>这一句，我们调用了jieba的cut方法，将刚刚获取的文件内容text传如cut方法，这样jieba就将我们的text自动分词，分为一个一个单词组成的词组。最后将词组赋值给新定义的变量 text_cut</p>
<pre><code class="language-python"># 单词拼接
result = ' '.join(text_cut)
</code></pre>
<p>这里有调用了一个join方法，传入我们的数组text_cut。什么意思呢？就是将这分好的一个个词语组合起来，使用空格隔开，组合成一个字符串。<br>
到这里，我们对于文章的处理就结束了，我们将原来的文章分成一个个词语，每个词语用空格隔开。为什么要这样处理呢？没有别的原因，就是因为我们后续调用的 wordcloud库就是这样规定的，他只能识别这样形式的数据。</p>
<pre><code class="language-python"># 生成次云图
wc = WordCloud(
    # 字体路径
    font_path=localpath + r'/simhei.ttf',
    # 背景颜色
    background_color='white',
    # 图片宽度
    width=500,
    height=350,
    # 字体的大小
    max_font_size=70,
    min_font_size=5,
)
# 生成词云图片
wc.generate(result)
</code></pre>
<p>这里看似复杂，其实更加简单，我们调用了wordcould的方法，并在方法中传入若干参数，通过这些参数定义我们生成词云的样式。<br>
这里尤其需要注意 font_path=localpath + r'/simhei.ttf' 这一句必不可少，因为wordcloud必须知道自己使用的字体文件是什么样的才能正确生成词云。所以我们在工作目录中放入了一个simhei.ttf字体文件，方便wordcloud调用。</p>
<p>这样我们的一个词云生成器 wc就定义好了，后续再调用 generate()方法并将处理好的数据变量result扔进去即可。</p>
<pre><code class="language-python">plt.imshow(wc)
plt.axis('off') 
plt.show()
</code></pre>
<p>词云做好了，如何让它显示出来？</p>
<ul>
<li>调用plt（就是开头引用的2D图像生成包）中imshow()方法将wc图片进行显示，</li>
<li>调用plt.axis('off')让它不要生成坐标轴</li>
<li>调用plt.show()方法使其显示出来。</li>
</ul>
<p>这样我们点击运行后一张词云图就显示出来了，注意工作目录中用到的 word.txt文件，simhei.ttf放在<a href="https://github.com/Wuriqilang/WordCloud">github</a>中，你可以自行下载。如果不会使用github下载也没关系，自己在网上任意下一个ttf的字体文件，自己随便写一个word.txt文本文档放到我们写的python程序目录中即可。</p>
<p>虽然我说的琐碎，但是在实际编写过程中相信你还是遇到许多问题，失败多次，各种环节出现奇葩的我没有提到的问题。<br>
没关系，多查多想多问。遇到问题，请在下方留言区留言</p>
<p><a href="https://zhuanlan.zhihu.com/p/27626809">更多词云资料</a><br>
<a href="https://github.com/Wuriqilang/WordCloud">本例源代码</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python实用教程02  Python UI编程]]></title>
        <id>http://doc.xr1228.com/post/python-shi-yong-jiao-cheng-02-python-ui-bian-cheng</id>
        <link href="http://doc.xr1228.com/post/python-shi-yong-jiao-cheng-02-python-ui-bian-cheng">
        </link>
        <updated>2020-01-22T13:51:17.000Z</updated>
        <content type="html"><![CDATA[<p>虽然说学习一门语言，通常都是从命令行开始的。因为命令行涉及到的知识点最少，也不需复杂的功能依赖，初学者在命令行程序中很容易掌握各种语言的特性。但是这种相对枯燥乏味的学习方式很容易让人产生挫败感，花费数个小时研究学习后展示在我们眼前的就是冷冰冰的几行数字。所以让我们从 UI 编程开始学习，结合实际例子来快速入门吧。</p>
<p>请在 VS Code 中新建一个.py 文件，输入以下内容。注意从现在开始，程序的输入切勿复制粘贴，自己敲进去代码和复制粘贴感觉是不同的！</p>
<pre><code class="language-python">import tkinter #引入Tkinter功能模块

root = tkinter.Tk() #实例化一个视窗对象

myLabel = tkinter.Label(root, text=&quot;Welcome to python's World&quot;)  #在视窗对象中实例化一个Label对象
myLabel.pack() #将对象放在窗口中

root.mainloop()  # 进入主窗口消息循环
</code></pre>
<p>点击运行（F5）后,出现就出现了第一个属于你的 Python 视窗</p>
<figure data-type="image" tabindex="1"><img src="http://doc.xr1228.com//post-images/1579701131042.png" alt="" loading="lazy"></figure>
<p>让我们来详细讲解以下这段代码：</p>
<pre><code class="language-python">import tkinter #引入Tkinter功能模块
</code></pre>
<p>什么叫做引入？什么叫做 Tkinter？</p>
<ul>
<li>引入：顾名思义，就是引用其他人写好的功能集（库）。这个功能有可能是 Python 内置的，也有可能是我们从包管理器下载来的。通过引入，我们就能用一行代码调用前人辛苦写好的功能，快速实现我们自己的需求。</li>
<li>Python 与包：Python 与包的关系，就如同工程师与设备的关系。今天工程师需要实现制作一个手机，那么我们就调来（引入）一个专门制作手机的机器，我不管这个机器是怎么造出来的，只要机器能生产出我们想要的手机即可。</li>
<li>包管理器：接着上面的类比，工程师今天不想造手机了，想直接造人民币。但我们并没有现成的人民币制造机，怎么呢？我们进口一台人民币制造机就可以了。包管理器就是我们去进口机器的地方。——包管理器中存放着数以万计的凝聚力无数人心血的功能包，我们想要调用包管理器中的包时，只需要在命令行中输入“pip install ....(包的名字)“即可。 本例并未使用包管理器，后续我们会接触到。</li>
<li>Tkinter：Tkinter 模块(Tk 接口)是 Python 的标准 Tk GUI 工具包的接口。啥意思？就是说这就是一个 Python 中已经内置的专门用来画用户界面的包。</li>
</ul>
<p>所以说，这行代码乍看起来不明白，说白了就是调用一个用来画用户界面的包。</p>
<pre><code class="language-python">root = tkinter.Tk() #实例化一个视窗对象
</code></pre>
<p>如果你接触过其他编程语言，就会发现这条语句似曾相识却又有所不同。我们先来解释这几个刚看到的名词。</p>
<ul>
<li>对象：简而言之就是具有某些功能和特性的抽象化集合。面向对象的编程思想中，世间万物都可以抽象为对象。所谓“晓看天色暮看云，行也对象，坐也对象“。上述代码中的root，就是我们所需要的视窗对象，而tkinter.TK()，则是生成对象的方法。</li>
<li>对象的实例化：其实举一个例子就很好懂。张无忌对对敌光明顶，想要使出一招乾坤大挪移，然而乾坤大挪移并不是一个实实在在的物体，怎么做呢？<strong>他按照《九阳神功》的口诀，调用体内真气流转将乾坤大挪移激发出来。<strong>这个过程就是</strong>实例化</strong>。</li>
</ul>
<figure data-type="image" tabindex="2"><img src="http://doc.xr1228.com//post-images/1579701158947.gif" alt="" loading="lazy"></figure>
<p>所以说, tkinter.TK() 就是九阳神功中运转乾坤大挪移的法门，root 则是我们实例化出得乾坤大挪移对象。只有将对象实例化后，我们才能操作他完来成一系列任务。</p>
<p>希望前面的解释能让你能对编程世界中最常用的几个概念有所体会，事实上编程就如同搭积木一样，我们调用不同的积木，采用不同的组合最后实现自己的目的。在工业实践应用中，参与编程的工程师并不需要早早了解多么深刻的编程原理和数据结构，我们能够熟练使用这些积木，搭建出想要的城堡就够了。</p>
<p>此时，视窗对象已经完成了实例化，我们希望这个视窗能够显示一个句子。所以我们要继续实例化出一个标签对象来承接我们的句子。所以我们用到了这样一条语句。</p>
<pre><code class="language-python">myLabel = tkinter.Label(root, text=&quot;Welcome to python's World&quot;)  #在视窗对象中实例化一个Label对象
myLabel.pack() #将对象放在窗口中
</code></pre>
<p>tkinter.Label()就是生成Label对象的方法。而括号中的内容，则是<strong>方法的传参</strong></p>
<ul>
<li>方法的传参：不要觉得这么多生词很难理解，其实简而言之，就是我们调用方法的时候，给定一些基本参数，让方法按照我们的设定执行。譬如我们调用了一个 &quot;做饭.鱼香肉丝()&quot;的方法，如果我们想要设定 肉300g,盐20g，在编程语言里就可以写成 “做饭.鱼香肉丝(肉=300，盐=20)“这样的形式。是不是很好理解呢？</li>
<li>解释这条语句：为了实例化出一个标签对象，我们采用tkinter.Label()的方法，在这个方法中我们传入两个参数，
<ul>
<li>第一个参数：root。这是告诉这个方法，我们的Label是在root中生成的。</li>
<li>第二个参数：test。这是告诉这个方法，我们的Label要显示test中的内容。</li>
</ul>
</li>
<li>myLable.pack():对象实例化出后还有一个重要步骤，就是让他显示出来，让Label显示出来的的方法是myLabel.pack().</li>
</ul>
<p><strong>到这里你一定非常迷惑——为啥要这么写？我怎么可能记住这么多方法？</strong></p>
<ul>
<li>为啥要这么写？ ——这是tkinter的作者规定的，你按照他的规定写就好了，以后当你自己写方法的时候你也可以很方便的规定他。</li>
<li>我怎么可能记住这么多方法？ —— “唯手熟尔”，当然装B的说法就是，这些常用的方法很好记的，不信你写几次就知道了。即使记不住也没关系，google以下即可。</li>
</ul>
<pre><code class="language-python">root.mainloop()  # 进入主窗口消息循环
</code></pre>
<p>最后一句也很好理解，就是让我们的视窗对象在运行起来。</p>
<p>希望这篇文章能对你有帮助，如果有任何疑问可以在下方评论区提出。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python实用教程01  一句话表白 ]]></title>
        <id>http://doc.xr1228.com/post/python-jiao-cheng-01</id>
        <link href="http://doc.xr1228.com/post/python-jiao-cheng-01">
        </link>
        <updated>2020-01-22T13:49:28.000Z</updated>
        <summary type="html"><![CDATA[<p>让我们做一个小游戏吧,体会一下 Python 独特的魅力。</p>
]]></summary>
        <content type="html"><![CDATA[<p>让我们做一个小游戏吧,体会一下 Python 独特的魅力。</p>
<!-- more -->
<p>请在 VS Code 中新建一个.py 文件，或者是在命令行管理器中输入 Python（MacOS 输入 Python3）写入以下内容。</p>
<pre><code class="language-python">print('\n'.join([''.join([('Chinese！'[(x-y)%8]if((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3&lt;=0 else' ')for x in range(-30,30)])for y in range(15,-15,-1)]))
</code></pre>
<p>点击运行（F5）后,出现了一个中国心。是不是很有趣？将代码中 Chinese！ 修改为喜欢的姑娘的名字送给她吧！(注意必须是 8 个字符)</p>
<figure data-type="image" tabindex="1"><img src="http://doc.xr1228.com//post-images/1579701034908.png" alt="" loading="lazy"></figure>
<p>Python 的魅力远不止于此,这段代码初学者还不需要明白是什么意思，让我们赶快进入到后面的学习吧！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python实用教程   介绍]]></title>
        <id>http://doc.xr1228.com/post/python</id>
        <link href="http://doc.xr1228.com/post/python">
        </link>
        <updated>2020-01-22T13:45:15.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>人生苦短，我用 Python。 ——鲁迅</p>
</blockquote>
<h2 id="写在开头">写在开头</h2>
<p>本文档专注于编程语言在工业领域的实际应用，以实例讲解为主，还原编程语言的工具属性。这里会主要告诉你一个“工具怎么用”、“为什么要用”，但是不会过多涉及到“工具如何制造”以及“怎么用才更好”的问题。</p>
<h2 id="why-python">Why Python</h2>
<ul>
<li><strong>天生优雅：</strong> Python 使用了极为优雅精炼的语法与程序结构，一个简单的程序 C与JAVA 可能需要200行，而Python仅仅需要20行。Python提供了大量语法糖（或许你曾在比较各种语言优劣时听过这个词）Python就是将许多复杂的代码实现转化为精炼优雅符合人类直觉的书写方式，实用Python写程序时就如同孩子在吃糖果。</li>
<li><strong>开箱即用：</strong> Python 提供了极为完善的基础代码库，很多看似复杂的程序实现可能仅仅需要调用Python中的一两个方法。对于一些复杂的图形处理，数据分析仅仅需要引入一两个依赖就能调用前人写好的功能模块。</li>
<li><strong>无所不能：</strong> 受益于Python目前的热度，这个已经走过30年岁月的语言焕发出了无穷的活力。Python能够胜任从数据库，网络编程，机器学习各方面的应用。</li>
</ul>
<h2 id="python-安装">Python 安装</h2>
<p>Python安装请选择最新版本3.7，网上有许多安装教程，这里不再赘述。<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1016959856222624">Python安装</a></p>
<h2 id="选用的编辑器">选用的编辑器</h2>
<p>按照编者的使用习惯，这里推荐使用VS Code作为您的Python编辑器。VS Code有以下优点：</p>
<ul>
<li>开源，免费；</li>
<li>自定义配置</li>
<li>集成git</li>
<li>智能提示强大</li>
<li>支持各种文件格式（html/jade/css/less/sass/xml）</li>
<li>调试功能强大</li>
<li>各种方便的快捷键</li>
<li>强大的插件扩展<br>
简而言之，掌握了VS Code，你不但可以如丝般顺滑的编写Python程序，你具有了编写前端网页，Nodejs，文档……的能力。这样一把由微软打造的神兵谁会不喜欢呢？ <a href="https://code.visualstudio.com/">vs Code官网</a></li>
</ul>
<h2 id="vs-code安装汉化插件">VS Code安装汉化插件</h2>
<p>VS code安装汉化插件非常简单，打开vs Code后，选择左侧菜单栏中的插件商店，输入Chinese后选择Chinese (Simplified) Language Pack for Visual Studio Code点击 Install 即可。</p>
<p>VS Code有很多优秀的插件能够极大的拓展VS Code功能，但如果你是编程初学者，建议先不要安装，让我们将更多注意力放在Python本身，以后按照自己的需要逐步拓展VS Code功能。</p>
<h2 id="一些学习python的资源">一些学习Python的资源</h2>
<ul>
<li>Python基础学习 <a href="https://www.liaoxuefeng.com/wiki/1016959663602400">廖雪峰Python教程</a></li>
<li>实用Python脚本学习视频 <a href="https://www.bilibili.com/video/av45221676">实用主义教你学Python脚本</a></li>
<li><a href="https://www.bilibili.com/video/av16942112">Tkinter 做简单的窗口视窗</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ 智能制造简述]]></title>
        <id>http://doc.xr1228.com/post/zhi-neng-zhi-zao-jian-shu</id>
        <link href="http://doc.xr1228.com/post/zhi-neng-zhi-zao-jian-shu">
        </link>
        <updated>2020-01-22T07:56:31.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-为什么智能制造">一、为什么智能制造</h2>
<p>2016年7月，京东方的业务定位由一家半导体显示技术、产品和服务提供商转型为一家为信息交互和人类健康提供智慧端口产品和专业服务的物联网公司。在践行智能制造的过程中，我们开发了一套应用于京东方面板生产产线的设备智能监控系统。旨在消除设备监控死角，节约不良调查时间，减少工厂生产运营人力成本。将设备监控从“发现不良→调查设备→解决问题”的被动模式转化为”设备监控→预防不良”的主动模式。通过充分挖掘企业数据潜能，建立一套可视化、智能化的设备监控系统，将工程师从繁复的日常监控工作中解放出来,为公司运营提供长久动力。</p>
<h3 id="11-array智造整体架构">1.1 Array智造整体架构</h3>
<p>如何真正实现智能制造，将智能化生产应用于实际工厂运营当中来不同工厂有不同的思路。通过对我国智能制造试点示范项目进行分析，梳理出如下九种典型的智能制造新模式：<br>
<img src="https://cdn.nlark.com/yuque/0/2019/png/332465/1567583134061-9095d2cc-1ced-4460-a1d0-b20f5a119eaa.png#align=left&amp;display=inline&amp;height=386&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=386&amp;originWidth=587&amp;size=118189&amp;status=done&amp;width=587" alt="图片.png" loading="lazy"></p>
<p>工厂的智能化程度取决于其对数据的利用程度。结合对京东方自动化程度以及实际生产制造模式，设计了一种以挖掘企业数据潜能为核心的智能制造模式。<br>
设备智能监控系统是一套建立在BOE工厂现有CIM系统基础上，以挖掘数据潜能为核心思路而设计的数据采集、处理、分析系统。这个系统由以下几个节点组成：<br>
1.设备端：高度信息化的设备实时信息发送给MES系统，通过EIS对信息格式进行统一。<br>
2.CIM端：通过MES、YMS、DFS、eMpa、SPC、BO等系统将生产信息，测试信息进行汇总处理，并提供端口供设备智能监控程序调用原始数据。<br>
3.监控端：智能监控程序将原始数据进行分析处理最后生成可视化程度、集成度高的信息反馈给工程师，并展示在Monitor看板，以便管理者掌握生产运营状态。<br>
<img src="https://cdn.nlark.com/yuque/0/2019/png/332465/1567583254106-8d646a0c-d511-4e26-8363-63e59382842a.png#align=left&amp;display=inline&amp;height=320&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=320&amp;originWidth=548&amp;size=74161&amp;status=done&amp;width=548" alt="图片.png" loading="lazy"></p>
<p>所以说Array智造软件专注于应用层的开发，通过整合现有数据资源，通过软件来优化工程师工作效率，减少无用的重复的劳动。</p>
<h3 id="12-array智造的基础-数据">1.2 Array智造的基础 —— 数据</h3>
<p>本节重点介绍Array智造中的数据如如何获取的，并介绍了两个采集数据的软件。<br>
为了便于理解，下面将通过不同功能的的数据源获取方式来依次介绍Array智造的数据模块。</p>
<h4 id="121-aoi-monitor的数据获取">1.2.1 AOI Monitor的数据获取</h4>
<p>AOI Monitor在设计之初是单纯为日常Monitor工作服务的，所以采用了单一数据源 —— DFS</p>
<ul>
<li>DFS 是公司提供的分布式文件存储服务，对于我们业务部门来说，其使用体验等同于共享。</li>
<li>目前DFS 的统一访问地址是  10.120.8.52  账号是 dfssrv2\cifsa  密码是 cifsa</li>
<li>注意：AOI Monitor为访问Inform等常用功能开放了快捷方式，后续担当可以根据业务需求修改</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/332465/1567584769308-57815052-ea59-4897-8f98-fb85eaaac450.png#align=left&amp;display=inline&amp;height=192&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=192&amp;originWidth=226&amp;size=7897&amp;status=done&amp;width=226" alt="图片.png" loading="lazy">    <img src="https://cdn.nlark.com/yuque/0/2019/png/332465/1567584583410-1027da76-f284-42dd-93d9-7359c56a053f.png#align=left&amp;display=inline&amp;height=178&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=178&amp;originWidth=404&amp;size=39133&amp;status=done&amp;width=404" alt="图片.png" loading="lazy"></p>
<h4 id="122-cd-monitor的数据获取">1.2.2 CD Monitor的数据获取</h4>
<p>CD Monitor的数据流是 CD设备→曝光机共享→Monitor软件  来进行的，其获取数据的手段都是通过FileGee软件，该软件会在后面重点介绍。 该部分由马晓宇负责，如由疑问联系马晓宇。</p>
<h4 id="123-im-monitor的数据获取">1.2.3 IM Monitor的数据获取</h4>
<p>IM Monitor的数据来源如下：</p>
<ul>
<li>DFS   包含了用户查询的IM Monitor图片信息</li>
<li>FTP   IM监控电脑不能访问共享，所以提交Abnormal时会先将Abnormal数据传到</li>
</ul>
<blockquote>
<p>FTP://10.120.9.22/【7】IM Abnormal</p>
</blockquote>
<ul>
<li>共享  所有的Abnormal图片都会在存储在新共享</li>
</ul>
<blockquote>
<p>\10.120.21.123\Photo共享\42.Photo工程部工作优化小组\Array智造\MuraHistor</p>
</blockquote>
<p>所以IM Monitor的数据流向如下<br>
<img src="https://cdn.nlark.com/yuque/0/2019/png/332465/1567586067028-e975c41e-9c89-48cc-9b56-597a0626b153.png#align=left&amp;display=inline&amp;height=349&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=349&amp;originWidth=1096&amp;size=11649&amp;status=done&amp;width=1096" alt="图片.png" loading="lazy"></p>
<h4 id="124-thk-monitor">1.2.4 THK Monitor</h4>
<p>THK Monitor数据来源全部为共享，数据流如下<br>
<img src="https://cdn.nlark.com/yuque/0/2019/png/332465/1567586183451-5e1e7fb1-b0a9-4bbe-98a5-7f7866258f86.png#align=left&amp;display=inline&amp;height=121&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=121&amp;originWidth=1053&amp;size=6779&amp;status=done&amp;width=1053" alt="图片.png" loading="lazy"><br>
值得注意的是THK共享近期没有进行维护，后续担当需要开启。</p>
<h4 id="125-设备监控">1.2.5 设备监控</h4>
<p>设备监控中所有的数据都是从设备ProcessData中获取的，当我们将ProcessData保存到共享中，Array智造软件就可以方便的对数据进行处理和展示。其数据流向如下：</p>
<figure data-type="image" tabindex="1"><img src="https://cdn.nlark.com/yuque/0/2019/png/332465/1567586828504-61a29a83-9785-4c56-9734-d43c4a0895ce.png#align=left&amp;display=inline&amp;height=667&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=667&amp;originWidth=1110&amp;size=29880&amp;status=done&amp;width=1110" alt="图片.png" loading="lazy"></figure>
<p>值得注意的是：每天设备的数据现在设备上使用FTP Ghost软件简单处理后再利用FileGee进行上传</p>
<h4 id="126-不良监控">1.2.6 不良监控</h4>
<p>不良监控为了将各台设备的AOI Trend和工艺相关联起来，采取了比较复杂的数据获取方式。<br>
其数据获取方式与设备监控数据获取类似，重点在于将设备的工艺数据与DFS的测试数据相结合起来。</p>
<figure data-type="image" tabindex="2"><img src="https://cdn.nlark.com/yuque/0/2019/png/332465/1567589162513-c0c2b6b2-ecb0-45c2-a1e7-ee86bfdb0c17.png#align=left&amp;display=inline&amp;height=659&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=659&amp;originWidth=1106&amp;size=30516&amp;status=done&amp;width=1106" alt="图片.png" loading="lazy"></figure>
<h4 id="127-产能监控">1.2.7 产能监控</h4>
<p>产能监控数据获取与设备监控相同，请参考 6.2.5</p>
<h4 id="128-数据处理软件-参考附件14">1.2.8 数据处理软件 参考附件【14】</h4>
<p>不难发现，上述各种数据获取离不开两个软件 FileGee与FTP Ghost。 具体使用方法较为复杂，已经单独交接给相关担当，软件请参考附件【14】</p>
<h3 id="13-智能制造的具体实现">1.3  智能制造的具体实现</h3>
<p>本节将介绍各软件模块的功能与基本实现思路，便于后续担当对软件进行进一步开发与维护。</p>
<h4 id="131-aoi-monitor">1.3.1 AOI Monitor</h4>
<p>AOI Monitor目的是简化工程师日常Monitor流程，方便数据信息获取与基本的不良调查，其功能必须配合DFS使用，即用户电脑要开启DFS权限。AOI Monitor主要功能与实现如下：<br>
<strong>AOI Monitor部分</strong></p>
<ul>
<li>通过LotID查询所有测试过得工序</li>
<li>点击相应工序后显示测试过得Glass并且计算Total，对于异常Total使用红色显示</li>
<li>点击跳转到DFS后能快捷跳转到DFS中，便于工程师看图</li>
</ul>
<p><strong>Tracing工具部分</strong></p>
<ul>
<li>通过GlassID查询所有测试过的工序</li>
<li>多工序匹配Tracing结果，已经抓图的显示匹配结果，有Defect未抓图显示粉色背景，没有抓图显示灰色</li>
</ul>
<p>这里着重说一下Tracing工具的实现方式：先通过Data文件夹将所有Defect点位获取，匹配后（匹配规则是如果两个工序的点 X+Y的差＜0.5um且Y的差&lt;0.5认为这两个点能够匹配到）筛选出查询到的Defect点并到Image文件夹中根据坐标找相应的图片，将图片地址存储到数据列表中，最后通过一定规则显示出来。</p>
<h4 id=""><img src="https://cdn.nlark.com/yuque/0/2019/png/332465/1567588150931-63e193b6-bbd9-4e61-bc70-942ca4601f84.png#align=left&amp;display=inline&amp;height=220&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=823&amp;originWidth=1130&amp;size=415771&amp;status=done&amp;width=302" alt="图片.png" loading="lazy">        <img src="https://cdn.nlark.com/yuque/0/2019/png/332465/1567588691160-49d5e579-b6bc-4cac-ac67-0d3662c67fa4.png#align=left&amp;display=inline&amp;height=223&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=823&amp;originWidth=1138&amp;size=231877&amp;status=done&amp;width=308" alt="图片.png" loading="lazy"></h4>
<p><strong>Mapping工具</strong></p>
<ul>
<li>该功能尚未开发完成，目标是能够根据DefectCode对多张Glass，或者多个Lot或者一段时间内的defect进行Mapping，请后续担当继续开发，如有问题可以联系我。</li>
</ul>
<h4 id="132-im-monitor">1.3.2 IM Monitor</h4>
<p>IM Monitor主要功能与实现如下：</p>
<ul>
<li>通过LotID查询所有测试过得工序，并显示IM图片</li>
<li>IM图片查看时具有放大镜功能</li>
<li>点击图片时自动计算点位与在LC机台上的位置</li>
<li>点击发送Abnormal单跳转到Abnormal单界面，在Abnormal单可以输入不良点位，并对图片进行标注</li>
<li>提交Abnormal单时自动计算，防止出现错误提交重复提交的情况</li>
<li>提交后的Abnormal单自动保存到FTP并且同步到共享中，工程师打开软件可以看到之前开的Abnormal记录</li>
<li>工程师可以对Abnormal单进行回复，回复后再记录界面显示回复情况，回复人等信息</li>
<li>附加Mura管理手册，便于Monitor人员判断不良原因</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://cdn.nlark.com/yuque/0/2019/png/332465/1567589798924-4c6d99bc-c741-411a-bbef-00940806f74e.png#align=left&amp;display=inline&amp;height=923&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=923&amp;originWidth=1239&amp;size=116133&amp;status=done&amp;width=1239" alt="图片.png" loading="lazy"></figure>
<h4 id="133-thk-monitor">1.3.3  THK Monitor</h4>
<p>注：THK Monitor目的是统一管理膜厚数据，简化膜厚数据处理。<br>
THK Monitor实现功能主要如下：</p>
<ul>
<li>
<p>从共享中中获取各设备测试历史，计算测试结果。 →<strong>后续担当应该严格要求到班组将数据放入相应文件夹中</strong></p>
</li>
<li>
<p>拖拽计算测试结果（支持用户把文件直接拖拽到软件中，自动计算）</p>
</li>
<li>
<p>支持同时查看两次测试结果（3D/Cross可以放到一个界面）</p>
</li>
</ul>
<p>因为测试数据复杂，计算逻辑和可视化逻辑需要的步骤较多，目前THK Monitor不足之处：</p>
<ul>
<li>
<p>文件命名必须严格遵循命名规则 （详见5.1）</p>
</li>
<li>
<p>对于3D的显示没有合适的Chart控件，所以没有显示三维图形。 →需要后续开发</p>
</li>
<li></li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://cdn.nlark.com/yuque/0/2019/png/332465/1567648084311-11142500-65b7-4d1a-b92c-ae0f6e3de52d.png#align=left&amp;display=inline&amp;height=785&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=785&amp;originWidth=1162&amp;size=102181&amp;status=done&amp;width=1162" alt="图片.png" loading="lazy"></figure>
<h4 id="134-设备管理系统">1.3.4 设备管理系统</h4>
<p>设备管理系统承担着我们科室自动点检，设备状态监控，产能监控的重要使命。该部分需要详细介绍并后续担当重点优化与开发。</p>
<h5 id="1341-设备管理系统的两个软件版本">1.3.4.1 设备管理系统的两个软件版本</h5>
<p>为了优化设备的管理，在之前设备管理系统的基础上，开发了两个版本，他们在Array智造主界面的以下位置。<br>
<img src="https://cdn.nlark.com/yuque/0/2019/png/332465/1567648651670-a55ae6b8-0281-4584-9d12-209cb0201242.png#align=left&amp;display=inline&amp;height=222&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=222&amp;originWidth=1110&amp;size=20182&amp;status=done&amp;width=1110" alt="图片.png" loading="lazy"></p>
<ul>
<li>设备监控为旧版软件，包括了设备监控的绝大多数功能。</li>
<li>设备管理为新版软件，包括了HoldList与自动点检、ProcssData查看等新功能</li>
</ul>
<p><strong>计划将旧版软件所有功能迁移到新版软件，但是时间有限，请后续担当继续推进。</strong></p>
<h5 id="1342-自动点检功能">1.3.4.2 自动点检功能</h5>
<p>自动点检实现是将ProcessData中最新三张Glass数据与Spce表对比，如果其中有连续两张Glass都OutOfSPC，则提示设备参数异常。<br>
所以后续担当主要维护以下几点</p>
<ul>
<li>根据实际生产情况调整Spec</li>
<li>根据实际生产情况设置报警逻辑</li>
<li>根据工程师经验为每个参数设定调整建议和影响</li>
</ul>
<p>同时自动点检功能为一些重点参数设定了快捷查看入口，对于TactTime也设立了可视化图表</p>
<figure data-type="image" tabindex="5"><img src="https://cdn.nlark.com/yuque/0/2019/png/332465/1567649535066-521bef35-9c16-4555-8513-944b96f6c7fe.png#align=left&amp;display=inline&amp;height=825&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=825&amp;originWidth=1354&amp;size=175515&amp;status=done&amp;width=1354" alt="图片.png" loading="lazy"></figure>
<h5 id="1343-tank监控">1.3.4.3 Tank监控</h5>
<p>为了避免Tank切换导致的批次性工艺不良，在主界面也可以显示目前PLN设备使用的Tank情况<br>
计算逻辑是：根据设备最近一张Glass使用Tank情况判断目前设备使用哪个Tank</p>
<h5 id="1344-vcd时间点检">1.3.4.4 VCD时间点检</h5>
<p>计算逻辑：根据设备最近几张Glass VCD工艺时间计算两个VCD Chamber的工艺时间差</p>
<figure data-type="image" tabindex="6"><img src="https://cdn.nlark.com/yuque/0/2019/png/332465/1567649710578-67fa62aa-c044-4c18-8f1d-8f4920ac0a21.png#align=left&amp;display=inline&amp;height=493&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=493&amp;originWidth=347&amp;size=27243&amp;status=done&amp;width=347" alt="图片.png" loading="lazy"></figure>
<h5 id="1345-cd波动调查">1.3.4.5 CD波动调查</h5>
<p>计算逻辑：根据设备ProcessData将某个Lot CD波动相关数据直观展示</p>
<h5 id="1346-hold-list">1.3.4.6 Hold List</h5>
<p>HoldList实现逻辑相对较为复杂，具体实现方式<br>
BO自动发送邮件 → 通过OutLook功能自动下载附件至D盘→利用FileGee同步文件到共享→设备监控软件读取HoldList文件并筛选与Track相关Lot<br>
该功能重点在于邮箱附件的自动保存，但是这种方式费时费力还不好维护（OutLook的自动化功能也不稳定，后续我去CIM以后再进行修改吧）</p>
<h5 id="1347-自动化点检表">1.3.4.7 自动化点检表</h5>
<p>为应对体系审核，需要对点检表进行自动生成，该功能放在设备管理系统中，具体交由王志敏维护，详见1.3.5</p>
<h5 id="1348-processhistroy">1.3.4.8 ProcessHistroy</h5>
<p>为便于查看ProcessData History，模仿产线内History功能。<br>
该功能未开发完成，有以下遗留问题：</p>
<ul>
<li>数据获取耗时较长，计算逻辑有待优化</li>
<li>未加入可视化图表和数据筛选功能，需要进一步开发</li>
<li></li>
</ul>
<figure data-type="image" tabindex="7"><img src="https://cdn.nlark.com/yuque/0/2019/png/332465/1567650482748-27b87d01-0913-4f86-936f-92192ab25a6d.png#align=left&amp;display=inline&amp;height=981&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=981&amp;originWidth=1303&amp;size=65177&amp;status=done&amp;width=1303" alt="图片.png" loading="lazy"></figure>
<h4 id="135-自动化点检表">1.3.5 自动化点检表</h4>
<p>为应对体系检查，需要生成点检表。针对该问题开发功能如下：</p>
<ul>
<li>输入点检人，点击点检按钮对当日所有设备进行点检</li>
<li>对于NG项目备注中提示NG原因，并提示已经调整OK</li>
<li>点击保存点检结果后将点检数据保存到共享中</li>
<li>点击SPEC设置，可以查看设定的Spec值，（暂未加入修改Spec功能，修改需要在共享中修改Txt文件）</li>
<li>隐藏功能：选择StartTime→点击管理员功能  就可以实现从选择日期开始所有日期点检表的检查和保存</li>
</ul>
<figure data-type="image" tabindex="8"><img src="https://cdn.nlark.com/yuque/0/2019/png/332465/1567671153504-9972651b-53d9-427a-9855-720d91be2e91.png#align=left&amp;display=inline&amp;height=971&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=971&amp;originWidth=1292&amp;size=81412&amp;status=done&amp;width=1292" alt="图片.png" loading="lazy"></figure>
<h4 id="136-不良监控系统">1.3.6 不良监控系统</h4>
<p>为了优化不良调查流程，减少重复工作，开发了不良监控系统。<br>
目前实现功能如下：</p>
<ul>
<li>根据设备，日期，自动分析进行过的Lot，生成相关的Layer。</li>
<li>根据用户选择的Layer，输入的Defect Code，生成Trend（时间按照Track进行Mask时间），Chamber别，Mapping结果。 （如果DefectCode输入所有不良，则刷取所有Code）</li>
<li>支持切换DIPI和FIPI结果</li>
</ul>
<p>该功能仍有许多优化空间：</p>
<ul>
<li>目前尚未加入型号别刷取</li>
<li>刷取速度很大一部分取决于电脑速度，可以通过更加优化的异步等方法优化。</li>
<li>每次刷取是对时间和DFS资源的巨大负担，后续可以通过自动记录数据库的方式优化。（数据库已经进行过开发，但是受限于CS架构模式，暂时弃用）</li>
</ul>
<p>我们最终的目的是，10W左右的数据量能够在10s内显示出来，这必须依托于CS架构，所以我先去CIM学习了，后续开发可以联系我。</p>
<h4 id="137-产能监控">1.3.7 产能监控</h4>
<p>产能监控主要功能如下：</p>
<ul>
<li>根据用户选择设备，日期读取ProcessData，自动计算TactTime</li>
<li>根据过滤条件选择计算相应TactTime</li>
<li>计算cycleTime（但是cycleTime中部分EXP单元时间不正确，后续可以酌情调整）</li>
</ul>
<figure data-type="image" tabindex="9"><img src="https://cdn.nlark.com/yuque/0/2019/png/332465/1567673699483-867c9f77-37a9-4c97-9d64-92738be78158.png#align=left&amp;display=inline&amp;height=771&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=771&amp;originWidth=1240&amp;size=101617&amp;status=done&amp;width=1240" alt="图片.png" loading="lazy"></figure>
<h4 id="138-其他辅助功能">1.3.8 其他辅助功能</h4>
<p>智能制造中也开发了多项辅助功能，类似人工判图，Recipe自动生成等，请知悉。</p>
<h4 id="139-recipe自动备份-参考附件14">1.3.9 Recipe自动备份 参考附件【14】</h4>
<p>Recipe自动备份是确保重要数据不丢失的手段。其实现方法是通过FileGee进行的，附件中提供了FileGee使用手册。<br>
目前建立自动备份的方法已经交接给张雪，姜欢欢。请知悉</p>
<h3 id="14-智能制造的开发-参考附件15">1.4 智能制造的开发 参考附件【15】</h3>
<h4 id="141-array智造软件的发布与安装">1.4.1 Array智造软件的发布与安装</h4>
<p>Array智造是一种CS构架的软件。CS架构是一种较为早期的软件架构模式，大多数的数据处理逻辑与运算是在客户端进行的，这种模式在效率和用户体验上有一定提升，但是每次用户安装和升级需要大量的工作。这里着重介绍一下Array智造软件的发布与安装。</p>
<ul>
<li>发布采用Visual Stuido自带的OneClick模式（类似于OIC的发布），这样的好处在于安装包存放在服务器或者共享中，提供给用户可以是一个2k的小安装程序。</li>
<li>发布时开发者设置好 版本号，运行环境，安装地址后点击发布即可（具体有疑问联系我）</li>
<li>Array智造采用了 Task.Run（多线程）等.net FrameWork4.5 以上才有的功能，所以Win7电脑安装Array智造时需要先安装 .net FrameWork 4.5即以上  参考附件【16】</li>
</ul>
<h4 id="142-array智造-开发环境构建">1.4.2 Array智造 开发环境构建</h4>
<ul>
<li>Array智造开发工具为 VS（Visual Studio 2017即以上），该软件有微软提供的社区免费版本，百度一下即可</li>
<li>Array智造选用的主要开发语言为C#，少量功能采用了 前端语言实现（html js css），后续担当简单学习即可，以解决实际工作需求为目的。</li>
<li>经过大量对比测试，Array选用的技术框架为 Winform，这是一种比较古老的技术框架，但是适配性好，上手容易。</li>
<li>UI控件集选用了MetroFramework UI，并且根据其源码进行了一定程度的定制开发。推荐后续担当采用此框架</li>
</ul>
<h4 id="143-array智造源代码">1.4.3 Array智造源代码</h4>
<ul>
<li>因为Array智造本质也属于一种比较宝贵的脑力活动资产，源代码保留在我之前使用的科室笔记本电脑中，已经交际给担当 姜欢欢。</li>
</ul>
<h4 id="144-智能制造开发所需的一些学习资源-参考附件17">1.4.4 智能制造开发所需的一些学习资源  参考附件【17】</h4>
<ul>
<li>编程学习推荐在网易云课堂搜索C#进行学习</li>
<li>附件中提供了少量学习资料，多数学习教程存放在 科室笔记本电脑  D盘 学习资料中</li>
<li>在Bilibili上也有很多C#语言相关的学习资源</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[大数据的基本概念]]></title>
        <id>http://doc.xr1228.com/post/whyBigdata</id>
        <link href="http://doc.xr1228.com/post/whyBigdata">
        </link>
        <updated>2020-01-22T07:10:52.000Z</updated>
        <summary type="html"><![CDATA[<p>大数据这个词已经火热了很多年，似乎处处都存在着大数据的噱头，让我们回归本质，探讨一下大数据是什么？</p>
]]></summary>
        <content type="html"><![CDATA[<p>大数据这个词已经火热了很多年，似乎处处都存在着大数据的噱头，让我们回归本质，探讨一下大数据是什么？</p>
<!-- more -->
<h2 id="背景-为什么需要大数据">背景 为什么需要大数据？</h2>
<ul>
<li>我们比以往产生<strong>更多</strong>且<strong>更多样性</strong>的数据</li>
<li>我们比以往<strong>更快的</strong>产生数据</li>
<li>这些数据具有其价值性</li>
</ul>
<p>针对以上三个基本原因，我们必须通过处理这些数据来提取其中的价值。</p>
<p>然而处理这些大量的数据面临两个问题：</p>
<ul>
<li>大规模数据的存储</li>
<li>大规模数据的分析</li>
</ul>
<p>这里我们举一个<strong>例子</strong>：早期的网络环境就如同一条小河，依河而居的人们世代通过抓鱼维生。这个时期鱼的数量有限、种类单一。人们只需要把鱼抓起来放到冰箱，想吃的时候直接拿出来烤就可以了。</p>
<figure data-type="image" tabindex="1"><img src="http://doc.xr1228.com//post-images/1579677299293.PNG" alt="" loading="lazy"></figure>
<p>随着人类抓鱼的速度越来越快，抓鱼水平越来越高。人们抓到的鱼数量越来越大，种类越来越丰富。人们逐渐遇到了两个代表性的问题：</p>
<ul>
<li>冰箱放不下（存储不足）</li>
<li>烹饪不过来（处理效率不足）</li>
</ul>
<p>如何解决这样的问题呢？</p>
<ol>
<li>冰箱放不下：</li>
</ol>
<p>解决冰箱放不下无非两个思路。①换一个大一点的冰箱（<strong>纵向扩展</strong>）②多买几个冰箱（横向扩展）<br>
显然纵向扩展是难以实现的，存10000...条鱼需要多大的冰箱？<br>
横向扩展相对容易实现，鱼多的时候多买一些冰箱，搞一个冷库（<strong>集群</strong>）然后大家一起去存放鱼（<strong>分布式存储</strong>）<br>
然而随着冰箱越来越多（<strong>集群规模扩大</strong>），人们又单独做了一个账本（<strong>元数据</strong>），里面存储了每条鱼存放在冰箱什么位置的信息。</p>
<ol start="2">
<li>烹饪不过来：</li>
</ol>
<p>鱼越来越多，即使所有的鱼都能保存到冰箱中，但是只有一个厨师的话效率实在太低。<br>
不如多找几个厨师，大家一起烤（分布式计算）</p>
<h2 id=""></h2>
<p>所以说，大数据技术本质上用于解决 海量数据提取、存储、处理的一套技术，分布式是其主要实现思路。</p>
<h2 id="重要结论">重要结论</h2>
<p><strong>学术界普遍认为大数据仍处于发展与创新的初始阶段</strong>。大量数据的存储并不是大数据技术的主要问题甚至不是重要问题，非结构化的数据的快速处理与分析利用才是大数据要解决的最主要问题。</p>
<p><strong>大数据是相对的</strong>，大数据的概念也是不断变化的。（三十年前100M也是大数据）大数据是指用现有技术手段和软件难以快速处理的数据。今天的大数据主要强调数据的非结构性与实时处理的要求。</p>
<p><strong>人是大数据中重要的环节，数据可视化是实现人的作用的主要工具</strong> 大数据强调人通过数据可视化对大数据运算结果的再次分析与知识提炼，以便进行进一步的数据挖掘。</p>
<p>** 大数据的四个特点：**</p>
<ul>
<li>Volume 数据量大</li>
<li>Velocity 速度快</li>
<li>Variety 种类多样</li>
<li>Value 价值密度低</li>
</ul>
]]></content>
    </entry>
</feed>